cmake_minimum_required(VERSION 3.16)

project(yices2)

cmake_policy(SET CMP0003 NEW)
cmake_policy(SET CMP0010 NEW)
cmake_policy(SET CMP0095 NEW)
option(YICES_CPP "Use c++ compiler" OFF)
option(YICES_MSAT "Use msat" OFF)
option(PER_THREAD_STATE "Per thread state support" ON)
set(SANITIZE OFF CACHE STRING "Use ADDRESS or THREAD sanitizer or OFF")
set_property(CACHE SANITIZE PROPERTY STRINGS OFF ADDRESS THREAD)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 17)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON CACHE BOOL "LTO")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO OFF)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF)
if(WIN32)
  add_compile_options(-MP -vmg)
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Gw -GS-")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -Gw -GS-")
  string(REPLACE "/Zi" "-Z7" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "/Zi" "-Z7" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  if(SANITIZE)
    add_definitions(-D_DISABLE_VECTOR_ANNOTATION)
    string(REPLACE "/RTC1" "" _flags "${CMAKE_CXX_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_DEBUG "${_flags} -Oy-")
    if(SANITIZE STREQUAL ADDRESS)
      add_compile_options(-fsanitize=address)
    else()
      message(FATAL_ERROR "Unsupported sanitizer '${SANITIZE}' when ADDRESS or OFF is expected")
    endif()
  endif()
else()
  if(SANITIZE)
    if(SANITIZE STREQUAL ADDRESS)
      if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(EXTRA_SANITIZERS ",pointer-compare,pointer-subtract")
      endif()
      set(SANITIZERS -fsanitize=address,undefined${EXTRA_SANITIZERS} -fsanitize-address-use-after-scope -fstack-protector-all -fstack-clash-protection -fno-sanitize=alignment)
    elseif(SANITIZE STREQUAL THREAD)
      set(SANITIZERS -fsanitize=thread)
    else()
      message(FATAL_ERROR "Unsupported sanitizer '${SANITIZE}' when ADDRESS, THREAD or OFF is expected")
    endif()
    add_compile_options(${SANITIZERS} -fno-omit-frame-pointer -U_FORTIFY_SOURCE)
    add_link_options(${SANITIZERS})
  else()
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer -fno-stack-protector")
  endif()
  add_compile_options(-Wno-write-strings -fpermissive -Wno-narrowing)
endif()
set(YICES_GMP gmp CACHE STRING "gmp or mpir lib")
find_program(GPERF gperf)

find_package(PkgConfig REQUIRED)
pkg_check_modules(${YICES_GMP} REQUIRED IMPORTED_TARGET ${YICES_GMP})

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)

function(add_bin bin_name)
  add_executable(${bin_name} ${ARGN})
  target_link_libraries(${bin_name} PRIVATE yices_static)
  if(YICES_CPP)
    set_source_files_properties(${ARGN} PROPERTIES LANGUAGE CXX)
  endif()
endfunction()

function(add_tst bin_name)
  add_bin(${bin_name} ${ARGN})
  add_test(NAME ${bin_name} COMMAND ${bin_name})
endfunction()

function(add_all_tests)
  set(bad_tests
  test_egraph_assertion_queue
  test_offset_equalities2
  test_parse_tables
  test_pprod_table
  test_types
  test_wide_truth_tables
  )
  file(GLOB_RECURSE all_c LIST_DIRECTORIES false "*.c")
  foreach(c IN LISTS all_c)
    get_filename_component(bin_name ${c} NAME_WE)
    add_bin(${bin_name}_utest ${c})
    if (bin_name IN_LIST bad_tests)
      continue()
    endif()
    file(READ "${c}" c_str)
    string(FIND "${c_str}" "yices_set_out_of_mem_callback" use_mem_callback)
    if(use_mem_callback GREATER -1)
      continue()
    endif()
    string(FIND "${c_str}" "assert_true" use_assert)
    if(use_assert GREATER -1)
      continue()
    endif()
    string(FIND "${c_str}" "if (argc" use_input_file)
    if(use_input_file GREATER -1)
      continue()
    endif()
    string(FIND "${c_str}" "process_command_line" use_input_file)
    if(use_input_file GREATER -1)
      continue()
    endif()
    string(FIND "${c_str}" "yices_has_mcsat" need_msat)
    if(YICES_MSAT OR need_msat EQUAL -1)
      add_test(NAME ${bin_name} COMMAND ${bin_name}_utest)
    endif()
  endforeach()
  file(GLOB_RECURSE all_gold LIST_DIRECTORIES false "*.gold")
#  foreach(g IN LISTS all_gold)
#    message(${g})
#  endforeach()
endfunction()

enable_testing()
add_subdirectory(src)
add_subdirectory(tests)
add_subdirectory(examples)
